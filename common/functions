# recursive content search
function search_content() {
	if [ "$#" -ne 2 ]; then
		echo "Usage : search_content [CONTENT] [PATH]"
		return
	fi
	grep -rniw $2 -e $1
}

function extract_archive {
	if [ -z "$1" ]; then
		echo "Usage: extract_archive <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
	else
		if [ -f $1 ] ; then
			case $1 in
				*.tar.bz2)   tar xvjf $1    ;;
				*.tar.gz)    tar xvzf $1    ;;
				*.tar.xz)    tar xvJf $1    ;;
				*.lzma)      unlzma $1      ;;
				*.bz2)       bunzip2 $1     ;;
				*.rar)       unrar x -ad $1 ;;
				*.gz)        gunzip $1      ;;
				*.tar)       tar xvf $1     ;;
				*.tbz2)      tar xvjf $1    ;;
				*.tgz)       tar xvzf $1    ;;
				*.zip)       unzip $1       ;;
				*.Z)         uncompress $1  ;;
				*.7z)        7z x $1        ;;
				*.xz)        unxz $1        ;;
				*.exe)       cabextract $1  ;;
				*)           echo "extract: '$1' - unknown archive method" ;;
			esac
		else
			echo "$1 - file does not exist"
		fi
	fi
}

function backup() {
	if [ "$#" -lt 1 ]; then
		echo "Usage : backup [PATH..]"
		return
	fi
	for f in "$@"
	do
		cp -r "$f"{,.bak}
	done
}

function myip() {
	external_ip="$(curl -s -m 0.5 http://ipecho.net/plain)"
	echo $external_ip
}

function mycity() {
	city="$(curl -s -m 0.5 http://ip-api.com/line/\?fields\=city)"
	echo $city
}

function imageoptim() {
	if [ "$#" -lt 1 ]; then
		echo "Usage : imageoptim [FILE_PATH..]"
		return
	fi
	for f in "$@"
	do
		cp -r "$f"{,.ori}
		echo $f | while IFS= read file
		do
			filename=$(basename $file)
			ext=$(echo ${filename##*.} | tr "[:upper:]" "[:lower:]")
			if [ -f $file ]; then
				if ( [ $ext == "png" ] || [ $ext == "jpg" ] || [ $ext == "jpeg" ] ); then
					JSON=`curl -i --user api:gCrX460inNDnnjiTGuEbof7p3J6DNR_Z --data-binary @$file https://api.tinypng.com/shrink 2>/dev/null`
					succes=$?
					if [[ "$succes" -eq 0 ]]; then
						URL=${JSON/*url\":\"/}
						URL=${URL/\"*/}

						curl $URL > ${file} 2>/dev/null
						succes=$?
					fi

					if [[ "$succes" -ne 0 ]]; then
						echo "Cannont use the tinypng API for $file"
					fi
				else
					echo "File format error for $file"
				fi
			else
				echo "File doesn't exist : $file"
			fi
		done
	done
}

function gedit_rm_tmp_files() {
	find -L . -name '*~' -exec rm -f {} \;
}

function change_default_shell() {
	if [ "$#" -ne 1 ]; then
		echo "Usage : use_shell bash|zsh"
		return
	fi
	chsh -s $(which $1) $(whoami)
	$1
}

function retina_downgrade() {
	if [ "$#" -lt 1 ] || [ -n "$(which sips)" ]; then
		echo "Usage : retina_downgrade [FILE_PATH..] (need sips command)"
		return
	fi
	for f in "$@"
	do
		outfile=$(dirname "$image")/$(basename "$image" @2x.png).png
		if [ "$f" -nt "$outfile" ]; then
		    basename "$outfile"

		    width=$(sips -g "pixelWidth" "$f" | awk 'FNR>1 {print $2}')
		    height=$(sips -g "pixelHeight" "$f" | awk 'FNR>1 {print $2}')
		    sips -z $(($height / 2)) $(($width / 2)) "$f" --out "$outfile"
		fi
		unset outfile
	done
	unset f
}

function = 
{
  echo "$@" | bc -l
}
